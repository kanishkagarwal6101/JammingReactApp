{"ast":null,"code":"var clientId=\"c565939d445e45b698c7bcc383e9cf5b\";var redirectUri=\"http://playlistadd.surge.sh\";var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}// check for access token match\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);// This clears the parameters. Allowing us to grab a new access token when it expires.\nwindow.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState(\"Access Token\",null,\"/\");return accessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientId,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectUri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});});},savePlaylist:function savePlaylist(name,trackUris){if(!name||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId;return fetch(\"https://api.spotify.com/v1/me\",{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:\"POST\",body:JSON.stringify({name:name})});}).then(function(response){return response.json();}).then(function(jsonResponse){var playListId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playListId,\"/tracks\"),{headers:headers,method:\"POST\",body:JSON.stringify({uris:trackUris})});});}};export default Spotify;","map":{"version":3,"sources":["D:/web development/codecademy/React Music App/reactmusicappapi/src/util/Spotify.js"],"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris"],"mappings":"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","sourcesContent":["const clientId = \"c565939d445e45b698c7bcc383e9cf5b\";\r\nconst redirectUri = \"http://playlistadd.surge.sh\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      // This clears the parameters. Allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n      });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: name }),\r\n        });\r\n      })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        const playListId = jsonResponse.id;\r\n        return fetch(\r\n          `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\r\n          {\r\n            headers: headers,\r\n            method: \"POST\",\r\n            body: JSON.stringify({ uris: trackUris }),\r\n          }\r\n        );\r\n      });\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n"]},"metadata":{},"sourceType":"module"}