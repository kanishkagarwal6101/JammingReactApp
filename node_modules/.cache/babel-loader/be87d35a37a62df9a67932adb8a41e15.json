{"ast":null,"code":"import { render } from \"@testing-library/react\";\nimport { SearchBar } from \"../Components/searchBar/SearchBar\";\nconst clientId = \"c565939d445e45b698c7bcc383e9cf5b\";\nconst redirectUri = \"http://playlistadd.surge.sh/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } // check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); // This clears the parameters. Allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = \"\", expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => response.json()).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: name\n        })\n      });\n    }).then(response => response.json()).then(jsonResponse => {\n      const playListId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`, {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          uris: trackUris\n        })\n      });\n    });\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["D:/web development/codecademy/React Music App/reactmusicappapi/src/util/Spotify.js"],"names":["render","SearchBar","clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playListId","uris"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\r\nimport { SearchBar } from \"../Components/searchBar/SearchBar\";\r\n\r\nconst clientId = \"c565939d445e45b698c7bcc383e9cf5b\";\r\nconst redirectUri = \"http://playlistadd.surge.sh/\";\r\nlet accessToken;\r\n\r\nconst Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // check for access token match\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      // This clears the parameters. Allowing us to grab a new access token when it expires.\r\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\r\n      window.history.pushState(\"Access Token\", null, \"/\");\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: { Authorization: `Bearer ${accessToken}` },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        if (!jsonResponse.tracks) {\r\n          return [];\r\n        }\r\n        return jsonResponse.tracks.items.map((track) => ({\r\n          id: track.id,\r\n          name: track.name,\r\n          artist: track.artists[0].name,\r\n          album: track.album.name,\r\n          uri: track.uri,\r\n        }));\r\n      });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n          headers: headers,\r\n          method: \"POST\",\r\n          body: JSON.stringify({ name: name }),\r\n        });\r\n      })\r\n      .then((response) => response.json())\r\n      .then((jsonResponse) => {\r\n        const playListId = jsonResponse.id;\r\n        return fetch(\r\n          `https://api.spotify.com/v1/users/${userId}/playlists/${playListId}/tracks`,\r\n          {\r\n            headers: headers,\r\n            method: \"POST\",\r\n            body: JSON.stringify({ uris: trackUris }),\r\n          }\r\n        );\r\n      });\r\n  },\r\n};\r\n\r\nexport default Spotify;\r\n"]},"metadata":{},"sourceType":"module"}