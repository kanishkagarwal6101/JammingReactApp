{"ast":null,"code":"var _jsxFileName = \"D:\\\\web development\\\\codecademy\\\\React Music App\\\\reactmusicappapi\\\\src\\\\Components\\\\App\\\\App.js\";\nimport React from \"react\";\nimport { SearchBar } from \"../searchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/playlist\";\nimport \"./App.css\";\nimport { ReactDOM } from \"react\";\nimport Spotify from \"../../util/Spotify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [{\n        name: \"hello\"\n      }],\n      playlistName: \"My playlist\",\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    tracks.push(track);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({\n      playlistTracks: tracks\n    });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: []\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight\",\n          children: \"mmm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), \"ing\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: this.search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App-playlist\",\n          children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n            searchResults: this.state.searchResults,\n            onAdd: this.addTrack\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n            playlistName: this.state.playlistName,\n            playlistTracks: this.state.playlistTracks,\n            onRemove: this.removeTrack,\n            onNameChange: this.updatePlaylistName,\n            onSave: this.savePlaylist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/web development/codecademy/React Music App/reactmusicappapi/src/Components/App/App.js"],"names":["React","SearchBar","SearchResults","Playlist","ReactDOM","Spotify","App","Component","constructor","props","state","searchResults","name","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","tracks","find","savedTrack","id","push","setState","filter","currentTrack","trackUris","map","uri","then","term","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { SearchBar } from \"../searchBar/SearchBar\";\nimport { SearchResults } from \"../SearchResults/SearchResults\";\nimport { Playlist } from \"../Playlist/playlist\";\nimport \"./App.css\";\nimport { ReactDOM } from \"react\";\n\nimport Spotify from \"../../util/Spotify\";\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [{ name: \"hello\" }],\n      playlistName: \"My playlist\",\n      playlistTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map((track) => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: \"New Playlist\",\n        playlistTracks: [],\n      });\n    });\n  }\n\n  search(term) {\n    Spotify.search(term).then((searchResults) => {\n      this.setState({ searchResults: searchResults });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <Playlist\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}